{"ast":null,"code":"'use strict';\n\nexports.start = startMetrics;\nexports.stop = stopMetrics;\nexports.save = saveMetrics;\nexports.send = sendMetrics;\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst npm = require('../npm.js');\n\nconst regFetch = require('libnpm/fetch');\n\nconst uuid = require('uuid');\n\nconst cacheFile = require('./cache-file.js');\n\nlet inMetrics = false;\n\nfunction startMetrics() {\n  if (inMetrics) return; // loaded on demand to avoid any recursive deps when `./metrics-launch` requires us.\n\n  var metricsLaunch = require('./metrics-launch.js');\n\n  npm.metricsProcess = metricsLaunch();\n}\n\nfunction stopMetrics() {\n  if (inMetrics) return;\n  if (npm.metricsProcess) npm.metricsProcess.kill('SIGKILL');\n}\n\nfunction saveMetrics(itWorked) {\n  if (inMetrics) return; // If the metrics reporter hasn't managed to PUT yet then kill it so that it doesn't\n  // step on our updating the anonymous-cli-metrics json\n\n  stopMetrics();\n  var metricsFile = path.join(npm.config.get('cache'), 'anonymous-cli-metrics.json');\n  var metrics;\n\n  try {\n    metrics = JSON.parse(fs.readFileSync(metricsFile));\n    metrics.metrics.to = new Date().toISOString();\n\n    if (itWorked) {\n      ++metrics.metrics.successfulInstalls;\n    } else {\n      ++metrics.metrics.failedInstalls;\n    }\n  } catch (ex) {\n    metrics = {\n      metricId: uuid.v4(),\n      metrics: {\n        from: new Date().toISOString(),\n        to: new Date().toISOString(),\n        successfulInstalls: itWorked ? 1 : 0,\n        failedInstalls: itWorked ? 0 : 1\n      }\n    };\n  }\n\n  try {\n    cacheFile.write(metricsFile, JSON.stringify(metrics));\n  } catch (ex) {// we couldn't write and/or chown the error metrics file, oh well.\n  }\n}\n\nfunction sendMetrics(metricsFile, metricsRegistry) {\n  inMetrics = true;\n  var cliMetrics = JSON.parse(fs.readFileSync(metricsFile));\n  regFetch(`/-/npm/anon-metrics/v1/${encodeURIComponent(cliMetrics.metricId)}`, // NOTE: skip npmConfig() to prevent auth\n  {\n    registry: metricsRegistry,\n    method: 'PUT',\n    body: cliMetrics.metrics,\n    retry: false\n  }).then(() => {\n    fs.unlinkSync(metricsFile);\n  }, err => {\n    cacheFile.write(path.join(path.dirname(metricsFile), 'last-send-metrics-error.txt'), err.stack);\n  });\n}","map":{"version":3,"sources":["D:/node_modules/npm/lib/utils/metrics.js"],"names":["exports","start","startMetrics","stop","stopMetrics","save","saveMetrics","send","sendMetrics","fs","require","path","npm","regFetch","uuid","cacheFile","inMetrics","metricsLaunch","metricsProcess","kill","itWorked","metricsFile","join","config","get","metrics","JSON","parse","readFileSync","to","Date","toISOString","successfulInstalls","failedInstalls","ex","metricId","v4","from","write","stringify","metricsRegistry","cliMetrics","encodeURIComponent","registry","method","body","retry","then","unlinkSync","err","dirname","stack"],"mappings":"AAAA;;AACAA,OAAO,CAACC,KAAR,GAAgBC,YAAhB;AACAF,OAAO,CAACG,IAAR,GAAeC,WAAf;AACAJ,OAAO,CAACK,IAAR,GAAeC,WAAf;AACAN,OAAO,CAACO,IAAR,GAAeC,WAAf;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,iBAAD,CAAzB;;AAEA,IAAIM,SAAS,GAAG,KAAhB;;AAEA,SAASd,YAAT,GAAyB;AACvB,MAAIc,SAAJ,EAAe,OADQ,CAEvB;;AACA,MAAIC,aAAa,GAAGP,OAAO,CAAC,qBAAD,CAA3B;;AACAE,EAAAA,GAAG,CAACM,cAAJ,GAAqBD,aAAa,EAAlC;AACD;;AAED,SAASb,WAAT,GAAwB;AACtB,MAAIY,SAAJ,EAAe;AACf,MAAIJ,GAAG,CAACM,cAAR,EAAwBN,GAAG,CAACM,cAAJ,CAAmBC,IAAnB,CAAwB,SAAxB;AACzB;;AAED,SAASb,WAAT,CAAsBc,QAAtB,EAAgC;AAC9B,MAAIJ,SAAJ,EAAe,OADe,CAE9B;AACA;;AACAZ,EAAAA,WAAW;AACX,MAAIiB,WAAW,GAAGV,IAAI,CAACW,IAAL,CAAUV,GAAG,CAACW,MAAJ,CAAWC,GAAX,CAAe,OAAf,CAAV,EAAmC,4BAAnC,CAAlB;AACA,MAAIC,OAAJ;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWlB,EAAE,CAACmB,YAAH,CAAgBP,WAAhB,CAAX,CAAV;AACAI,IAAAA,OAAO,CAACA,OAAR,CAAgBI,EAAhB,GAAqB,IAAIC,IAAJ,GAAWC,WAAX,EAArB;;AACA,QAAIX,QAAJ,EAAc;AACZ,QAAEK,OAAO,CAACA,OAAR,CAAgBO,kBAAlB;AACD,KAFD,MAEO;AACL,QAAEP,OAAO,CAACA,OAAR,CAAgBQ,cAAlB;AACD;AACF,GARD,CAQE,OAAOC,EAAP,EAAW;AACXT,IAAAA,OAAO,GAAG;AACRU,MAAAA,QAAQ,EAAErB,IAAI,CAACsB,EAAL,EADF;AAERX,MAAAA,OAAO,EAAE;AACPY,QAAAA,IAAI,EAAE,IAAIP,IAAJ,GAAWC,WAAX,EADC;AAEPF,QAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAFG;AAGPC,QAAAA,kBAAkB,EAAEZ,QAAQ,GAAG,CAAH,GAAO,CAH5B;AAIPa,QAAAA,cAAc,EAAEb,QAAQ,GAAG,CAAH,GAAO;AAJxB;AAFD,KAAV;AASD;;AACD,MAAI;AACFL,IAAAA,SAAS,CAACuB,KAAV,CAAgBjB,WAAhB,EAA6BK,IAAI,CAACa,SAAL,CAAed,OAAf,CAA7B;AACD,GAFD,CAEE,OAAOS,EAAP,EAAW,CACX;AACD;AACF;;AAED,SAAS1B,WAAT,CAAsBa,WAAtB,EAAmCmB,eAAnC,EAAoD;AAClDxB,EAAAA,SAAS,GAAG,IAAZ;AACA,MAAIyB,UAAU,GAAGf,IAAI,CAACC,KAAL,CAAWlB,EAAE,CAACmB,YAAH,CAAgBP,WAAhB,CAAX,CAAjB;AACAR,EAAAA,QAAQ,CACL,0BAAyB6B,kBAAkB,CAACD,UAAU,CAACN,QAAZ,CAAsB,EAD5D,EAEN;AACA;AACEQ,IAAAA,QAAQ,EAAEH,eADZ;AAEEI,IAAAA,MAAM,EAAE,KAFV;AAGEC,IAAAA,IAAI,EAAEJ,UAAU,CAAChB,OAHnB;AAIEqB,IAAAA,KAAK,EAAE;AAJT,GAHM,CAAR,CASEC,IATF,CASO,MAAM;AACXtC,IAAAA,EAAE,CAACuC,UAAH,CAAc3B,WAAd;AACD,GAXD,EAWG4B,GAAG,IAAI;AACRlC,IAAAA,SAAS,CAACuB,KAAV,CAAgB3B,IAAI,CAACW,IAAL,CAAUX,IAAI,CAACuC,OAAL,CAAa7B,WAAb,CAAV,EAAqC,6BAArC,CAAhB,EAAqF4B,GAAG,CAACE,KAAzF;AACD,GAbD;AAcD","sourcesContent":["'use strict'\r\nexports.start = startMetrics\r\nexports.stop = stopMetrics\r\nexports.save = saveMetrics\r\nexports.send = sendMetrics\r\n\r\nconst fs = require('fs')\r\nconst path = require('path')\r\nconst npm = require('../npm.js')\r\nconst regFetch = require('libnpm/fetch')\r\nconst uuid = require('uuid')\r\nconst cacheFile = require('./cache-file.js')\r\n\r\nlet inMetrics = false\r\n\r\nfunction startMetrics () {\r\n  if (inMetrics) return\r\n  // loaded on demand to avoid any recursive deps when `./metrics-launch` requires us.\r\n  var metricsLaunch = require('./metrics-launch.js')\r\n  npm.metricsProcess = metricsLaunch()\r\n}\r\n\r\nfunction stopMetrics () {\r\n  if (inMetrics) return\r\n  if (npm.metricsProcess) npm.metricsProcess.kill('SIGKILL')\r\n}\r\n\r\nfunction saveMetrics (itWorked) {\r\n  if (inMetrics) return\r\n  // If the metrics reporter hasn't managed to PUT yet then kill it so that it doesn't\r\n  // step on our updating the anonymous-cli-metrics json\r\n  stopMetrics()\r\n  var metricsFile = path.join(npm.config.get('cache'), 'anonymous-cli-metrics.json')\r\n  var metrics\r\n  try {\r\n    metrics = JSON.parse(fs.readFileSync(metricsFile))\r\n    metrics.metrics.to = new Date().toISOString()\r\n    if (itWorked) {\r\n      ++metrics.metrics.successfulInstalls\r\n    } else {\r\n      ++metrics.metrics.failedInstalls\r\n    }\r\n  } catch (ex) {\r\n    metrics = {\r\n      metricId: uuid.v4(),\r\n      metrics: {\r\n        from: new Date().toISOString(),\r\n        to: new Date().toISOString(),\r\n        successfulInstalls: itWorked ? 1 : 0,\r\n        failedInstalls: itWorked ? 0 : 1\r\n      }\r\n    }\r\n  }\r\n  try {\r\n    cacheFile.write(metricsFile, JSON.stringify(metrics))\r\n  } catch (ex) {\r\n    // we couldn't write and/or chown the error metrics file, oh well.\r\n  }\r\n}\r\n\r\nfunction sendMetrics (metricsFile, metricsRegistry) {\r\n  inMetrics = true\r\n  var cliMetrics = JSON.parse(fs.readFileSync(metricsFile))\r\n  regFetch(\r\n    `/-/npm/anon-metrics/v1/${encodeURIComponent(cliMetrics.metricId)}`,\r\n    // NOTE: skip npmConfig() to prevent auth\r\n    {\r\n      registry: metricsRegistry,\r\n      method: 'PUT',\r\n      body: cliMetrics.metrics,\r\n      retry: false\r\n    }\r\n  ).then(() => {\r\n    fs.unlinkSync(metricsFile)\r\n  }, err => {\r\n    cacheFile.write(path.join(path.dirname(metricsFile), 'last-send-metrics-error.txt'), err.stack)\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}