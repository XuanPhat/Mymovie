{"ast":null,"code":"'use strict'; // calls linkIfExists on unix, or cmdShimIfExists on Windows\n// reads the cmd shim to ensure it's where we need it to be in the case of\n// top level global packages\n\nconst readCmdShim = require('read-cmd-shim');\n\nconst cmdShim = require('cmd-shim');\n\nconst {\n  linkIfExists\n} = require('./link.js');\n\nconst binLink = (from, to, opts, cb) => {\n  // just for testing\n  const platform = opts._FAKE_PLATFORM_ || process.platform;\n\n  if (platform !== 'win32') {\n    return linkIfExists(from, to, opts, cb);\n  }\n\n  if (!opts.clobberLinkGently || opts.force === true || !opts.gently || typeof opts.gently !== 'string') {\n    // easy, just go ahead and delete anything in the way\n    return cmdShim.ifExists(from, to, cb);\n  } // read all three shim targets\n  // if any exist, and are not a shim to our gently folder, then\n  // exit with a simulated EEXIST error.\n\n\n  const shimFiles = [to, to + '.cmd', to + '.ps1']; // call this once we've checked all three, if we're good\n\n  const done = () => cmdShim.ifExists(from, to, cb);\n\n  const then = times(3, done, cb);\n  shimFiles.forEach(to => isClobberable(from, to, opts, then));\n};\n\nconst times = (n, ok, cb) => {\n  let errState = null;\n  return er => {\n    if (!errState) {\n      if (er) {\n        cb(errState = er);\n      } else if (--n === 0) {\n        ok();\n      }\n    }\n  };\n};\n\nconst isClobberable = (from, to, opts, cb) => {\n  readCmdShim(to, (er, target) => {\n    // either going to get an error, or the target of where this\n    // cmd shim points.\n    // shim, not in opts.gently: simulate EEXIST\n    // not a shim: simulate EEXIST\n    // ENOENT: fine, move forward\n    // shim in opts.gently: fine\n    if (er) {\n      switch (er.code) {\n        case 'ENOENT':\n          // totally fine, nothing there to clobber\n          return cb();\n\n        case 'ENOTASHIM':\n          // something is there, and it's not one of ours\n          return cb(simulateEEXIST(from, to));\n\n        default:\n          // would probably fail this way later anyway\n          // can't read the file, likely can't write it either\n          return cb(er);\n      }\n    } // no error, check the target\n\n\n    if (target.indexOf(opts.gently) !== 0) {\n      return cb(simulateEEXIST(from, to));\n    } // ok!  it's one of ours.\n\n\n    return cb();\n  });\n};\n\nconst simulateEEXIST = (from, to) => {\n  // simulate the EEXIST we'd get from fs.symlink to the file\n  const err = new Error('EEXIST: file already exists, cmd shim \\'' + from + '\\' -> \\'' + to + '\\'');\n  err.code = 'EEXIST';\n  err.path = from;\n  err.dest = to;\n  return err;\n};\n\nmodule.exports = binLink;","map":{"version":3,"sources":["D:/node_modules/npm/node_modules/gentle-fs/lib/bin-link.js"],"names":["readCmdShim","require","cmdShim","linkIfExists","binLink","from","to","opts","cb","platform","_FAKE_PLATFORM_","process","clobberLinkGently","force","gently","ifExists","shimFiles","done","then","times","forEach","isClobberable","n","ok","errState","er","target","code","simulateEEXIST","indexOf","err","Error","path","dest","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\n// calls linkIfExists on unix, or cmdShimIfExists on Windows\r\n// reads the cmd shim to ensure it's where we need it to be in the case of\r\n// top level global packages\r\n\r\nconst readCmdShim = require('read-cmd-shim')\r\nconst cmdShim = require('cmd-shim')\r\nconst {linkIfExists} = require('./link.js')\r\n\r\nconst binLink = (from, to, opts, cb) => {\r\n  // just for testing\r\n  const platform = opts._FAKE_PLATFORM_ || process.platform\r\n  if (platform !== 'win32') {\r\n    return linkIfExists(from, to, opts, cb)\r\n  }\r\n\r\n  if (!opts.clobberLinkGently ||\r\n      opts.force === true ||\r\n      !opts.gently ||\r\n      typeof opts.gently !== 'string') {\r\n    // easy, just go ahead and delete anything in the way\r\n    return cmdShim.ifExists(from, to, cb)\r\n  }\r\n\r\n  // read all three shim targets\r\n  // if any exist, and are not a shim to our gently folder, then\r\n  // exit with a simulated EEXIST error.\r\n\r\n  const shimFiles = [\r\n    to,\r\n    to + '.cmd',\r\n    to + '.ps1'\r\n  ]\r\n\r\n  // call this once we've checked all three, if we're good\r\n  const done = () => cmdShim.ifExists(from, to, cb)\r\n  const then = times(3, done, cb)\r\n  shimFiles.forEach(to => isClobberable(from, to, opts, then))\r\n}\r\n\r\nconst times = (n, ok, cb) => {\r\n  let errState = null\r\n  return er => {\r\n    if (!errState) {\r\n      if (er) {\r\n        cb(errState = er)\r\n      } else if (--n === 0) {\r\n        ok()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst isClobberable = (from, to, opts, cb) => {\r\n  readCmdShim(to, (er, target) => {\r\n    // either going to get an error, or the target of where this\r\n    // cmd shim points.\r\n    // shim, not in opts.gently: simulate EEXIST\r\n    // not a shim: simulate EEXIST\r\n    // ENOENT: fine, move forward\r\n    // shim in opts.gently: fine\r\n    if (er) {\r\n      switch (er.code) {\r\n        case 'ENOENT':\r\n          // totally fine, nothing there to clobber\r\n          return cb()\r\n        case 'ENOTASHIM':\r\n          // something is there, and it's not one of ours\r\n          return cb(simulateEEXIST(from, to))\r\n        default:\r\n          // would probably fail this way later anyway\r\n          // can't read the file, likely can't write it either\r\n          return cb(er)\r\n      }\r\n    }\r\n    // no error, check the target\r\n    if (target.indexOf(opts.gently) !== 0) {\r\n      return cb(simulateEEXIST(from, to))\r\n    }\r\n    // ok!  it's one of ours.\r\n    return cb()\r\n  })\r\n}\r\n\r\nconst simulateEEXIST = (from, to) => {\r\n  // simulate the EEXIST we'd get from fs.symlink to the file\r\n  const err = new Error('EEXIST: file already exists, cmd shim \\'' +\r\n    from + '\\' -> \\'' + to + '\\'')\r\n\r\n  err.code = 'EEXIST'\r\n  err.path = from\r\n  err.dest = to\r\n  return err\r\n}\r\n\r\nmodule.exports = binLink\r\n"]},"metadata":{},"sourceType":"script"}