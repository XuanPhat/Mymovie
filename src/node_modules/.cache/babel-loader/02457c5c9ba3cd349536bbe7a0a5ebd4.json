{"ast":null,"code":"'use strict';\n\nvar util = require(\"util\");\n\nfunction toString(val) {\n  val = val.toString(8);\n\n  while (val.length < 4) {\n    val = \"0\" + val;\n  }\n\n  return val;\n}\n\nvar defaultUmask = 18; // 0022;\n\nvar defaultUmaskString = toString(defaultUmask);\n\nfunction validate(data, k, val) {\n  // must be either an integer or an octal string.\n  if (typeof val === \"number\" && !isNaN(val)) {\n    data[k] = val;\n    return true;\n  }\n\n  if (typeof val === \"string\") {\n    if (val.charAt(0) !== \"0\") {\n      return false;\n    }\n\n    data[k] = parseInt(val, 8);\n    return true;\n  }\n\n  return false;\n}\n\nfunction convert_fromString(val, cb) {\n  if (typeof val === \"string\") {\n    // check for octal string first\n    if (val.charAt(0) === '0' && /^[0-7]+$/.test(val)) {\n      val = parseInt(val, 8);\n    } else if (val.charAt(0) !== '0' && /^[0-9]+$/.test(val)) {\n      // legacy support for decimal strings\n      val = parseInt(val, 10);\n    } else {\n      return cb(new Error(util.format(\"Expected octal string, got %j, defaulting to %j\", val, defaultUmaskString)), defaultUmask);\n    }\n  } else if (typeof val !== \"number\") {\n    return cb(new Error(util.format(\"Expected number or octal string, got %j, defaulting to %j\", val, defaultUmaskString)), defaultUmask);\n  }\n\n  val = Math.floor(val);\n\n  if (val < 0 || val > 511) {\n    return cb(new Error(util.format(\"Must be in range 0..511 (0000..0777), got %j\", val)), defaultUmask);\n  }\n\n  cb(null, val);\n}\n\nfunction fromString(val, cb) {\n  // synchronous callback, no zalgo\n  convert_fromString(val, cb || function (err, result) {\n    /*jslint unparam:true*/\n    val = result;\n  });\n  return val;\n}\n\nexports.toString = toString;\nexports.fromString = fromString;\nexports.validate = validate;","map":{"version":3,"sources":["D:/node_modules/npm/node_modules/umask/index.js"],"names":["util","require","toString","val","length","defaultUmask","defaultUmaskString","validate","data","k","isNaN","charAt","parseInt","convert_fromString","cb","test","Error","format","Math","floor","fromString","err","result","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar util = require(\"util\");\r\n\r\nfunction toString(val) {\r\n    val = val.toString(8);\r\n    while (val.length < 4) {\r\n        val = \"0\" + val;\r\n    }\r\n    return val;\r\n}\r\n\r\nvar defaultUmask = 18; // 0022;\r\nvar defaultUmaskString = toString(defaultUmask);\r\n\r\nfunction validate(data, k, val) {\r\n    // must be either an integer or an octal string.\r\n    if (typeof val === \"number\" && !isNaN(val)) {\r\n        data[k] = val;\r\n        return true;\r\n    }\r\n\r\n    if (typeof val === \"string\") {\r\n        if (val.charAt(0) !== \"0\") {\r\n            return false;\r\n        }\r\n        data[k] = parseInt(val, 8);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction convert_fromString(val, cb) {\r\n    if (typeof val === \"string\") {\r\n        // check for octal string first\r\n        if (val.charAt(0) === '0' && /^[0-7]+$/.test(val)) {\r\n            val = parseInt(val, 8);\r\n        } else if (val.charAt(0) !== '0' && /^[0-9]+$/.test(val)) {\r\n            // legacy support for decimal strings\r\n            val = parseInt(val, 10);\r\n        } else {\r\n            return cb(new Error(util.format(\"Expected octal string, got %j, defaulting to %j\",\r\n                                            val, defaultUmaskString)),\r\n                      defaultUmask);\r\n        }\r\n    } else if (typeof val !== \"number\") {\r\n        return cb(new Error(util.format(\"Expected number or octal string, got %j, defaulting to %j\",\r\n                                        val, defaultUmaskString)),\r\n                  defaultUmask);\r\n    }\r\n\r\n    val = Math.floor(val);\r\n\r\n    if ((val < 0) || (val > 511)) {\r\n        return cb(new Error(util.format(\"Must be in range 0..511 (0000..0777), got %j\", val)),\r\n                  defaultUmask);\r\n    }\r\n\r\n    cb(null, val);\r\n}\r\n\r\nfunction fromString(val, cb) {\r\n\r\n    // synchronous callback, no zalgo\r\n    convert_fromString(val, cb || function (err, result) {\r\n        /*jslint unparam:true*/\r\n        val = result;\r\n    });\r\n\r\n    return val;\r\n}\r\n\r\nexports.toString = toString;\r\nexports.fromString = fromString;\r\nexports.validate = validate;\r\n\r\n"]},"metadata":{},"sourceType":"script"}