{"ast":null,"code":"\"use strict\";\n/* global self, window, module, global, require */\n\nmodule.exports = function () {\n  \"use strict\";\n\n  var globalObject = void 0;\n\n  function isFunction(x) {\n    return typeof x === \"function\";\n  } // Seek the global object\n\n\n  if (global !== undefined) {\n    globalObject = global;\n  } else if (window !== undefined && window.document) {\n    globalObject = window;\n  } else {\n    globalObject = self;\n  } // Test for any native promise implementation, and if that\n  // implementation appears to conform to the specificaton.\n  // This code mostly nicked from the es6-promise module polyfill\n  // and then fooled with.\n\n\n  var hasPromiseSupport = function () {\n    // No promise object at all, and it's a non-starter\n    if (!globalObject.hasOwnProperty(\"Promise\")) {\n      return false;\n    } // There is a Promise object. Does it conform to the spec?\n\n\n    var P = globalObject.Promise; // Some of these methods are missing from\n    // Firefox/Chrome experimental implementations\n\n    if (!P.hasOwnProperty(\"resolve\") || !P.hasOwnProperty(\"reject\")) {\n      return false;\n    }\n\n    if (!P.hasOwnProperty(\"all\") || !P.hasOwnProperty(\"race\")) {\n      return false;\n    } // Older version of the spec had a resolver object\n    // as the arg rather than a function\n\n\n    return function () {\n      var resolve = void 0;\n      var p = new globalObject.Promise(function (r) {\n        resolve = r;\n      });\n\n      if (p) {\n        return isFunction(resolve);\n      }\n\n      return false;\n    }();\n  }(); // Export the native Promise implementation if it\n  // looks like it matches the spec\n\n\n  if (hasPromiseSupport) {\n    return globalObject.Promise;\n  } //  Otherwise, return the es6-promise polyfill by @jaffathecake.\n\n\n  return require(\"es6-promise\").Promise;\n}();","map":{"version":3,"sources":["D:/node_modules/npm/node_modules/es6-promisify/dist/promise.js"],"names":["module","exports","globalObject","isFunction","x","global","undefined","window","document","self","hasPromiseSupport","hasOwnProperty","P","Promise","resolve","p","r","require"],"mappings":"AAAA;AAEA;;AACAA,MAAM,CAACC,OAAP,GAAiB,YAAY;AAEzB;;AAEA,MAAIC,YAAY,GAAG,KAAK,CAAxB;;AAEA,WAASC,UAAT,CAAoBC,CAApB,EAAuB;AACnB,WAAO,OAAOA,CAAP,KAAa,UAApB;AACH,GARwB,CAUzB;;;AACA,MAAIC,MAAM,KAAKC,SAAf,EAA0B;AACtBJ,IAAAA,YAAY,GAAGG,MAAf;AACH,GAFD,MAEO,IAAIE,MAAM,KAAKD,SAAX,IAAwBC,MAAM,CAACC,QAAnC,EAA6C;AAChDN,IAAAA,YAAY,GAAGK,MAAf;AACH,GAFM,MAEA;AACHL,IAAAA,YAAY,GAAGO,IAAf;AACH,GAjBwB,CAmBzB;AACA;AACA;AACA;;;AACA,MAAIC,iBAAiB,GAAG,YAAY;AAEhC;AACA,QAAI,CAACR,YAAY,CAACS,cAAb,CAA4B,SAA5B,CAAL,EAA6C;AACzC,aAAO,KAAP;AACH,KAL+B,CAOhC;;;AACA,QAAIC,CAAC,GAAGV,YAAY,CAACW,OAArB,CARgC,CAUhC;AACA;;AACA,QAAI,CAACD,CAAC,CAACD,cAAF,CAAiB,SAAjB,CAAD,IAAgC,CAACC,CAAC,CAACD,cAAF,CAAiB,QAAjB,CAArC,EAAiE;AAC7D,aAAO,KAAP;AACH;;AAED,QAAI,CAACC,CAAC,CAACD,cAAF,CAAiB,KAAjB,CAAD,IAA4B,CAACC,CAAC,CAACD,cAAF,CAAiB,MAAjB,CAAjC,EAA2D;AACvD,aAAO,KAAP;AACH,KAlB+B,CAoBhC;AACA;;;AACA,WAAO,YAAY;AAEf,UAAIG,OAAO,GAAG,KAAK,CAAnB;AAEA,UAAIC,CAAC,GAAG,IAAIb,YAAY,CAACW,OAAjB,CAAyB,UAAUG,CAAV,EAAa;AAC1CF,QAAAA,OAAO,GAAGE,CAAV;AACH,OAFO,CAAR;;AAIA,UAAID,CAAJ,EAAO;AACH,eAAOZ,UAAU,CAACW,OAAD,CAAjB;AACH;;AAED,aAAO,KAAP;AACH,KAbM,EAAP;AAcH,GApCuB,EAAxB,CAvByB,CA6DzB;AACA;;;AACA,MAAIJ,iBAAJ,EAAuB;AACnB,WAAOR,YAAY,CAACW,OAApB;AACH,GAjEwB,CAmEzB;;;AACA,SAAOI,OAAO,CAAC,aAAD,CAAP,CAAuBJ,OAA9B;AACH,CArEgB,EAAjB","sourcesContent":["\"use strict\";\r\n\r\n/* global self, window, module, global, require */\r\nmodule.exports = function () {\r\n\r\n    \"use strict\";\r\n\r\n    var globalObject = void 0;\r\n\r\n    function isFunction(x) {\r\n        return typeof x === \"function\";\r\n    }\r\n\r\n    // Seek the global object\r\n    if (global !== undefined) {\r\n        globalObject = global;\r\n    } else if (window !== undefined && window.document) {\r\n        globalObject = window;\r\n    } else {\r\n        globalObject = self;\r\n    }\r\n\r\n    // Test for any native promise implementation, and if that\r\n    // implementation appears to conform to the specificaton.\r\n    // This code mostly nicked from the es6-promise module polyfill\r\n    // and then fooled with.\r\n    var hasPromiseSupport = function () {\r\n\r\n        // No promise object at all, and it's a non-starter\r\n        if (!globalObject.hasOwnProperty(\"Promise\")) {\r\n            return false;\r\n        }\r\n\r\n        // There is a Promise object. Does it conform to the spec?\r\n        var P = globalObject.Promise;\r\n\r\n        // Some of these methods are missing from\r\n        // Firefox/Chrome experimental implementations\r\n        if (!P.hasOwnProperty(\"resolve\") || !P.hasOwnProperty(\"reject\")) {\r\n            return false;\r\n        }\r\n\r\n        if (!P.hasOwnProperty(\"all\") || !P.hasOwnProperty(\"race\")) {\r\n            return false;\r\n        }\r\n\r\n        // Older version of the spec had a resolver object\r\n        // as the arg rather than a function\r\n        return function () {\r\n\r\n            var resolve = void 0;\r\n\r\n            var p = new globalObject.Promise(function (r) {\r\n                resolve = r;\r\n            });\r\n\r\n            if (p) {\r\n                return isFunction(resolve);\r\n            }\r\n\r\n            return false;\r\n        }();\r\n    }();\r\n\r\n    // Export the native Promise implementation if it\r\n    // looks like it matches the spec\r\n    if (hasPromiseSupport) {\r\n        return globalObject.Promise;\r\n    }\r\n\r\n    //  Otherwise, return the es6-promise polyfill by @jaffathecake.\r\n    return require(\"es6-promise\").Promise;\r\n}();"]},"metadata":{},"sourceType":"script"}