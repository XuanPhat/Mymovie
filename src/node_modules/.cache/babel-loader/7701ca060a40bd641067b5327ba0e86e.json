{"ast":null,"code":"'use strict';\n\nconst figgyPudding = require('figgy-pudding');\n\nconst index = require('./lib/entry-index');\n\nconst memo = require('./lib/memoization');\n\nconst write = require('./lib/content/write');\n\nconst to = require('mississippi').to;\n\nconst PutOpts = figgyPudding({\n  algorithms: {\n    default: ['sha512']\n  },\n  integrity: {},\n  memoize: {},\n  metadata: {},\n  pickAlgorithm: {},\n  size: {},\n  tmpPrefix: {},\n  single: {},\n  sep: {},\n  error: {},\n  strict: {}\n});\nmodule.exports = putData;\n\nfunction putData(cache, key, data, opts) {\n  opts = PutOpts(opts);\n  return write(cache, data, opts).then(res => {\n    return index.insert(cache, key, res.integrity, opts.concat({\n      size: res.size\n    })).then(entry => {\n      if (opts.memoize) {\n        memo.put(cache, entry, data, opts);\n      }\n\n      return res.integrity;\n    });\n  });\n}\n\nmodule.exports.stream = putStream;\n\nfunction putStream(cache, key, opts) {\n  opts = PutOpts(opts);\n  let integrity;\n  let size;\n  const contentStream = write.stream(cache, opts).on('integrity', int => {\n    integrity = int;\n  }).on('size', s => {\n    size = s;\n  });\n  let memoData;\n  let memoTotal = 0;\n  const stream = to((chunk, enc, cb) => {\n    contentStream.write(chunk, enc, () => {\n      if (opts.memoize) {\n        if (!memoData) {\n          memoData = [];\n        }\n\n        memoData.push(chunk);\n        memoTotal += chunk.length;\n      }\n\n      cb();\n    });\n  }, cb => {\n    contentStream.end(() => {\n      index.insert(cache, key, integrity, opts.concat({\n        size\n      })).then(entry => {\n        if (opts.memoize) {\n          memo.put(cache, entry, Buffer.concat(memoData, memoTotal), opts);\n        }\n\n        stream.emit('integrity', integrity);\n        cb();\n      });\n    });\n  });\n  let erred = false;\n  stream.once('error', err => {\n    if (erred) {\n      return;\n    }\n\n    erred = true;\n    contentStream.emit('error', err);\n  });\n  contentStream.once('error', err => {\n    if (erred) {\n      return;\n    }\n\n    erred = true;\n    stream.emit('error', err);\n  });\n  return stream;\n}","map":{"version":3,"sources":["D:/node_modules/npm/node_modules/cacache/put.js"],"names":["figgyPudding","require","index","memo","write","to","PutOpts","algorithms","default","integrity","memoize","metadata","pickAlgorithm","size","tmpPrefix","single","sep","error","strict","module","exports","putData","cache","key","data","opts","then","res","insert","concat","entry","put","stream","putStream","contentStream","on","int","s","memoData","memoTotal","chunk","enc","cb","push","length","end","Buffer","emit","erred","once","err"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst figgyPudding = require('figgy-pudding')\r\nconst index = require('./lib/entry-index')\r\nconst memo = require('./lib/memoization')\r\nconst write = require('./lib/content/write')\r\nconst to = require('mississippi').to\r\n\r\nconst PutOpts = figgyPudding({\r\n  algorithms: {\r\n    default: ['sha512']\r\n  },\r\n  integrity: {},\r\n  memoize: {},\r\n  metadata: {},\r\n  pickAlgorithm: {},\r\n  size: {},\r\n  tmpPrefix: {},\r\n  single: {},\r\n  sep: {},\r\n  error: {},\r\n  strict: {}\r\n})\r\n\r\nmodule.exports = putData\r\nfunction putData (cache, key, data, opts) {\r\n  opts = PutOpts(opts)\r\n  return write(cache, data, opts).then(res => {\r\n    return index.insert(\r\n      cache, key, res.integrity, opts.concat({ size: res.size })\r\n    ).then(entry => {\r\n      if (opts.memoize) {\r\n        memo.put(cache, entry, data, opts)\r\n      }\r\n      return res.integrity\r\n    })\r\n  })\r\n}\r\n\r\nmodule.exports.stream = putStream\r\nfunction putStream (cache, key, opts) {\r\n  opts = PutOpts(opts)\r\n  let integrity\r\n  let size\r\n  const contentStream = write.stream(\r\n    cache, opts\r\n  ).on('integrity', int => {\r\n    integrity = int\r\n  }).on('size', s => {\r\n    size = s\r\n  })\r\n  let memoData\r\n  let memoTotal = 0\r\n  const stream = to((chunk, enc, cb) => {\r\n    contentStream.write(chunk, enc, () => {\r\n      if (opts.memoize) {\r\n        if (!memoData) { memoData = [] }\r\n        memoData.push(chunk)\r\n        memoTotal += chunk.length\r\n      }\r\n      cb()\r\n    })\r\n  }, cb => {\r\n    contentStream.end(() => {\r\n      index.insert(cache, key, integrity, opts.concat({ size })).then(entry => {\r\n        if (opts.memoize) {\r\n          memo.put(cache, entry, Buffer.concat(memoData, memoTotal), opts)\r\n        }\r\n        stream.emit('integrity', integrity)\r\n        cb()\r\n      })\r\n    })\r\n  })\r\n  let erred = false\r\n  stream.once('error', err => {\r\n    if (erred) { return }\r\n    erred = true\r\n    contentStream.emit('error', err)\r\n  })\r\n  contentStream.once('error', err => {\r\n    if (erred) { return }\r\n    erred = true\r\n    stream.emit('error', err)\r\n  })\r\n  return stream\r\n}\r\n"]},"metadata":{},"sourceType":"script"}