{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst BB = require('bluebird');\n\nconst chmod = BB.promisify(fs.chmod);\nconst unlink = BB.promisify(fs.unlink);\nlet move;\nlet pinflight;\nmodule.exports = moveFile;\n\nfunction moveFile(src, dest) {\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return BB.fromNode(cb => {\n    fs.link(src, dest, err => {\n      if (err) {\n        if (err.code === 'EEXIST' || err.code === 'EBUSY') {// file already exists, so whatever\n        } else if (err.code === 'EPERM' && process.platform === 'win32') {// file handle stayed open even past graceful-fs limits\n        } else {\n          return cb(err);\n        }\n      }\n\n      return cb();\n    });\n  }).then(() => {\n    // content should never change for any reason, so make it read-only\n    return BB.join(unlink(src), process.platform !== 'win32' && chmod(dest, '0444'));\n  }).catch(() => {\n    if (!pinflight) {\n      pinflight = require('promise-inflight');\n    }\n\n    return pinflight('cacache-move-file:' + dest, () => {\n      return BB.promisify(fs.stat)(dest).catch(err => {\n        if (err.code !== 'ENOENT') {\n          // Something else is wrong here. Bail bail bail\n          throw err;\n        } // file doesn't already exist! let's try a rename -> copy fallback\n\n\n        if (!move) {\n          move = require('move-concurrently');\n        }\n\n        return move(src, dest, {\n          BB,\n          fs\n        });\n      });\n    });\n  });\n}","map":{"version":3,"sources":["D:/node_modules/npm/node_modules/cacache/lib/util/move-file.js"],"names":["fs","require","BB","chmod","promisify","unlink","move","pinflight","module","exports","moveFile","src","dest","fromNode","cb","link","err","code","process","platform","then","join","catch","stat"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAME,KAAK,GAAGD,EAAE,CAACE,SAAH,CAAaJ,EAAE,CAACG,KAAhB,CAAd;AACA,MAAME,MAAM,GAAGH,EAAE,CAACE,SAAH,CAAaJ,EAAE,CAACK,MAAhB,CAAf;AACA,IAAIC,IAAJ;AACA,IAAIC,SAAJ;AAEAC,MAAM,CAACC,OAAP,GAAiBC,QAAjB;;AACA,SAASA,QAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAOV,EAAE,CAACW,QAAH,CAAYC,EAAE,IAAI;AACvBd,IAAAA,EAAE,CAACe,IAAH,CAAQJ,GAAR,EAAaC,IAAb,EAAmBI,GAAG,IAAI;AACxB,UAAIA,GAAJ,EAAS;AACP,YAAIA,GAAG,CAACC,IAAJ,KAAa,QAAb,IAAyBD,GAAG,CAACC,IAAJ,KAAa,OAA1C,EAAmD,CACjD;AACD,SAFD,MAEO,IAAID,GAAG,CAACC,IAAJ,KAAa,OAAb,IAAwBC,OAAO,CAACC,QAAR,KAAqB,OAAjD,EAA0D,CAC/D;AACD,SAFM,MAEA;AACL,iBAAOL,EAAE,CAACE,GAAD,CAAT;AACD;AACF;;AACD,aAAOF,EAAE,EAAT;AACD,KAXD;AAYD,GAbM,EAaJM,IAbI,CAaC,MAAM;AACZ;AACA,WAAOlB,EAAE,CAACmB,IAAH,CAAQhB,MAAM,CAACM,GAAD,CAAd,EAAqBO,OAAO,CAACC,QAAR,KAAqB,OAArB,IAAgChB,KAAK,CAACS,IAAD,EAAO,MAAP,CAA1D,CAAP;AACD,GAhBM,EAgBJU,KAhBI,CAgBE,MAAM;AACb,QAAI,CAACf,SAAL,EAAgB;AAAEA,MAAAA,SAAS,GAAGN,OAAO,CAAC,kBAAD,CAAnB;AAAyC;;AAC3D,WAAOM,SAAS,CAAC,uBAAuBK,IAAxB,EAA8B,MAAM;AAClD,aAAOV,EAAE,CAACE,SAAH,CAAaJ,EAAE,CAACuB,IAAhB,EAAsBX,IAAtB,EAA4BU,KAA5B,CAAkCN,GAAG,IAAI;AAC9C,YAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzB;AACA,gBAAMD,GAAN;AACD,SAJ6C,CAK9C;;;AACA,YAAI,CAACV,IAAL,EAAW;AAAEA,UAAAA,IAAI,GAAGL,OAAO,CAAC,mBAAD,CAAd;AAAqC;;AAClD,eAAOK,IAAI,CAACK,GAAD,EAAMC,IAAN,EAAY;AAAEV,UAAAA,EAAF;AAAMF,UAAAA;AAAN,SAAZ,CAAX;AACD,OARM,CAAP;AASD,KAVe,CAAhB;AAWD,GA7BM,CAAP;AA8BD","sourcesContent":["'use strict'\r\n\r\nconst fs = require('graceful-fs')\r\nconst BB = require('bluebird')\r\nconst chmod = BB.promisify(fs.chmod)\r\nconst unlink = BB.promisify(fs.unlink)\r\nlet move\r\nlet pinflight\r\n\r\nmodule.exports = moveFile\r\nfunction moveFile (src, dest) {\r\n  // This isn't quite an fs.rename -- the assumption is that\r\n  // if `dest` already exists, and we get certain errors while\r\n  // trying to move it, we should just not bother.\r\n  //\r\n  // In the case of cache corruption, users will receive an\r\n  // EINTEGRITY error elsewhere, and can remove the offending\r\n  // content their own way.\r\n  //\r\n  // Note that, as the name suggests, this strictly only supports file moves.\r\n  return BB.fromNode(cb => {\r\n    fs.link(src, dest, err => {\r\n      if (err) {\r\n        if (err.code === 'EEXIST' || err.code === 'EBUSY') {\r\n          // file already exists, so whatever\r\n        } else if (err.code === 'EPERM' && process.platform === 'win32') {\r\n          // file handle stayed open even past graceful-fs limits\r\n        } else {\r\n          return cb(err)\r\n        }\r\n      }\r\n      return cb()\r\n    })\r\n  }).then(() => {\r\n    // content should never change for any reason, so make it read-only\r\n    return BB.join(unlink(src), process.platform !== 'win32' && chmod(dest, '0444'))\r\n  }).catch(() => {\r\n    if (!pinflight) { pinflight = require('promise-inflight') }\r\n    return pinflight('cacache-move-file:' + dest, () => {\r\n      return BB.promisify(fs.stat)(dest).catch(err => {\r\n        if (err.code !== 'ENOENT') {\r\n          // Something else is wrong here. Bail bail bail\r\n          throw err\r\n        }\r\n        // file doesn't already exist! let's try a rename -> copy fallback\r\n        if (!move) { move = require('move-concurrently') }\r\n        return move(src, dest, { BB, fs })\r\n      })\r\n    })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}