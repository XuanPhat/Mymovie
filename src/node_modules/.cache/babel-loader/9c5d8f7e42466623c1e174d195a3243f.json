{"ast":null,"code":"'use strict';\n\nvar stringWidth = require('string-width');\n\nvar stripAnsi = require('strip-ansi');\n\nmodule.exports = wideTruncate;\n\nfunction wideTruncate(str, target) {\n  if (stringWidth(str) === 0) return str;\n  if (target <= 0) return '';\n  if (stringWidth(str) <= target) return str; // We compute the number of bytes of ansi sequences here and add\n  // that to our initial truncation to ensure that we don't slice one\n  // that we want to keep in half.\n\n  var noAnsi = stripAnsi(str);\n  var ansiSize = str.length + noAnsi.length;\n  var truncated = str.slice(0, target + ansiSize); // we have to shrink the result to account for our ansi sequence buffer\n  // (if an ansi sequence was truncated) and double width characters.\n\n  while (stringWidth(truncated) > target) {\n    truncated = truncated.slice(0, -1);\n  }\n\n  return truncated;\n}","map":{"version":3,"sources":["D:/node_modules/npm/node_modules/gauge/wide-truncate.js"],"names":["stringWidth","require","stripAnsi","module","exports","wideTruncate","str","target","noAnsi","ansiSize","length","truncated","slice"],"mappings":"AAAA;;AACA,IAAIA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,SAASA,YAAT,CAAuBC,GAAvB,EAA4BC,MAA5B,EAAoC;AAClC,MAAIP,WAAW,CAACM,GAAD,CAAX,KAAqB,CAAzB,EAA4B,OAAOA,GAAP;AAC5B,MAAIC,MAAM,IAAI,CAAd,EAAiB,OAAO,EAAP;AACjB,MAAIP,WAAW,CAACM,GAAD,CAAX,IAAoBC,MAAxB,EAAgC,OAAOD,GAAP,CAHE,CAKlC;AACA;AACA;;AACA,MAAIE,MAAM,GAAGN,SAAS,CAACI,GAAD,CAAtB;AACA,MAAIG,QAAQ,GAAGH,GAAG,CAACI,MAAJ,GAAaF,MAAM,CAACE,MAAnC;AACA,MAAIC,SAAS,GAAGL,GAAG,CAACM,KAAJ,CAAU,CAAV,EAAaL,MAAM,GAAGE,QAAtB,CAAhB,CAVkC,CAYlC;AACA;;AACA,SAAOT,WAAW,CAACW,SAAD,CAAX,GAAyBJ,MAAhC,EAAwC;AACtCI,IAAAA,SAAS,GAAGA,SAAS,CAACC,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAZ;AACD;;AACD,SAAOD,SAAP;AACD","sourcesContent":["'use strict'\r\nvar stringWidth = require('string-width')\r\nvar stripAnsi = require('strip-ansi')\r\n\r\nmodule.exports = wideTruncate\r\n\r\nfunction wideTruncate (str, target) {\r\n  if (stringWidth(str) === 0) return str\r\n  if (target <= 0) return ''\r\n  if (stringWidth(str) <= target) return str\r\n\r\n  // We compute the number of bytes of ansi sequences here and add\r\n  // that to our initial truncation to ensure that we don't slice one\r\n  // that we want to keep in half.\r\n  var noAnsi = stripAnsi(str)\r\n  var ansiSize = str.length + noAnsi.length\r\n  var truncated = str.slice(0, target + ansiSize)\r\n\r\n  // we have to shrink the result to account for our ansi sequence buffer\r\n  // (if an ansi sequence was truncated) and double width characters.\r\n  while (stringWidth(truncated) > target) {\r\n    truncated = truncated.slice(0, -1)\r\n  }\r\n  return truncated\r\n}\r\n"]},"metadata":{},"sourceType":"script"}